apiVersion: v1
kind: Service
metadata:
  name: grafana
  labels:
    k8s-app: grafana
spec:
  ports:
  - port: 3000
  clusterIP: None
  selector:
    k8s-app: grafana
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: grafana
spec:
  selector:
    matchLabels:
      k8s-app: grafana # has to match .spec.template.metadata.labels
  serviceName: "grafana"
  replicas: 1
  template:
    metadata:
      labels:
        k8s-app: grafana # has to match .spec.selector.matchLabels
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: grafana
        image: grafana/grafana:4.6.0-beta2
        env:
        - name: GF_AUTH_BASIC_ENABLED
          value: "false"
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ORG_ROLE
          value: Admin
        - name: GF_SERVER_ROOT_URL
          value: /
          #        - name: GF_AUTH_BASIC_ENABLED
          #          value: "true"
          #        - name: GF_AUTH_ANONYMOUS_ENABLED
          #          value: "true"
          #        - name: GF_SECURITY_ADMIN_USER
          #          valueFrom:
          #            secretKeyRef:
          #              key: user
          #              name: grafana-secret
          #        - name: GF_SECURITY_ADMIN_PASSWORD
          #          valueFrom:
          #            secretKeyRef:
          #              key: password
          #              name: grafana-secret
        ports:
        - containerPort: 3000
        volumeMounts:
        - name: data
          mountPath: /var/lib/grafana
          readOnly: false
      volumes:
      - emptyDir: {}
        name: data
